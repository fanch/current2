#!/bin/sh
#
#  Copyright (c) 2014 by NuTyX team (http://nutyx.org)
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, 
#  USA.
#
#

# gettext initialization
# 
export TEXTDOMAIN='setup-nutyx'
export TEXTDOMAINDIR='/etc/rc.d/init.d/locale'
. gettext.sh
. /lib/lsb/init-functions

#
# Basics functions
#
info() {
	echo -e  " ====> $1"
}
error() {
	info "${FAILURE}ERROR: ${NORMAL}$1" >&2
	cleanup
	exit 1

}
warning() {
	info "${WARNING}WARNING: ${NORMAL}$1"
}
is_true()
{
 [ "$1" = "1" ] || [ "$1" = "yes" ] || [ "$1" = "true" ]
}
_msgfmt() {
	local L C
	L=`echo ${1}|cut -d "_" -f1`
	C=`echo ${1}|cut -d "_" -f2`
	echo "locale ${L}" >> ${CARDS}
	localedef -i ${1} -f UTF-8 ${1}.UTF-8
	if [ -n /lib/services/setup-nutyx/setup-nutyx.${L} ]; then
		mkdir -p $TEXTDOMAINDIR/${L}/LC_MESSAGES
		msgfmt /lib/services/setup-nutyx/setup-nutyx.${L} \
		-o $TEXTDOMAINDIR/${L}/LC_MESSAGES/setup-nutyx.mo
	fi
	echo "export LANG=${1}.utf-8" > ${LOCALE}
}
calc(){
        echo "scale=2;$@"|bc
}
#
# Main functions
#
interrupt() {
dialog --title " $(gettext "ERROR configuration") " \
	--msgbox " \n $(gettext "Please try again") " 7 32
exit 1
}

network_card_found() {
	if [ `ls /sys/class/net|sed /lo/d|wc -l` == 1 ];then
		NET_ID=`ls /sys/class/net|sed /lo/d`
	else
		retval=""
		touch $TMP/result
		while [ true ]; do
			echo  "--backtitle \" $(gettext "Network card") \" \
			--title \" $(gettext "Select the card") \" \
			--radiolist \" $(gettext "Card to configure") \" 0 0 0 \\" > $TMP/list
			for i in `ls /sys/class/net/|sed /lo/d`
			do
				echo -n \""$i"\"\  \"`/sbin/udevadm info /sys/class/net/$i|grep MODEL_FROM_DATABASE|cut -d "=" -f2`\" " off "
				done >> $TMP/list
				dialog --file $TMP/list 2>$TMP/result
				retval=$?
				result=`cat $TMP/result`
				case $retval in
					0)
						if [ "$result" != "" ]; then
							break
						fi;;
					1|255)
						if [ "$result" != "" ]; then
							break
						fi;;
				esac
		done
		NET_ID=`cat $TMP/result|sed 's/"//g'`
	fi
}
setup_net() 
{
network_card_found
retval=""
while [ "$retval" == "" ]; do
	dialog  \
	--title " $(gettext "Configuration of") ${NET_ID} " \
	--radiolist "$(gettext "Configuration mode")" \
	0 0 0 "$(gettext "Auto")" "$(gettext "IP address automatically set from DHCP server")" "on" \
	"$(gettext "Man")" "$(gettext "Manually specify parameters")" "off" 2> $TMP/result
	retval=$?
	result=`cat $TMP/result`
	case $retval in
		0)
			if [ "$result" == "" ]; then
				retval=""
			fi;;
		1|255)
				exit;;
  esac
done
if [ "`cat $TMP/result`" == "Auto" ];then
	cat > /etc/sysconfig/ifconfig.$NET_ID << "EOF"
ONBOOT="yes"
SERVICE="dhcpcd"
DHCP_START=""
DHCP_STOP="-k "
# Mettez PRINTIP="yes" pour que le script affiche l'addresse IP
PRINTIP="no"
# Mettez PRINTALL="yes" pour que le script affiche tous le détails
# de la connection réseau
PRINTALL="no"
EOF
else
	dialog \
	--title " $(gettext "Configuration of") ${NET_ID} " \
	--inputbox " $(gettext "Enter an IP address") : " 10 60 "192.168.1.5" 2> $TMP/IP

	if [ "`cat $TMP/IP`" == "" ]; then
		interrupt
	else
		 IP=$(tail -n 1 $TMP/IP)
	fi
	BC_TEMP=$(echo $IP|cut -d . -f 1).$(echo $IP|cut -d . -f 2).$(echo $IP|cut -d . -f 3).255
	dialog --title " $(gettext "Configuration of") ${NET_ID} " \
	--inputbox " $(gettext "Enter a broadcast address"),\
	$(gettext "in most cases the current value can be used"): " 10 60 ${BC_TEMP} 2> $TMP/BC
	if [ "`cat $TMP/BC`" == "" ]; then
		interrupt
	else
		BROADCAST=$(tail -n 1 $TMP/BC)
	fi
	dialog \
	--title " $(gettext "Configuration of") ${NET_ID} " \
	--inputbox "$(gettext "Enter the subnet mask"),\
	$(gettext "in most cases the current value can be used"): " 10 60 "255.255.255.0" 2> $TMP/NM
	if [ "`cat $TMP/NM`" == "" ]; then
		interrupt
	else
		PREFIX=$(tail -n 1 $TMP/NM)
	fi
	GW_TEMP=$(echo $IP|cut -d . -f 1).$(echo $IP|cut -d . -f 2).$(echo $IP|cut -d . -f 3).1
	dialog \
	--title " $(gettext "Configuration of") ${NET_ID} " \
	--inputbox "$(gettext "Enter the gateway address"),\
	$(gettext "it is normally the address of your router access point"): " 10 60 ${GW_TEMP} 2> $TMP/GW
	GW=$(tail -n 1 $TMP/GW)
	dialog \
	--title " $(gettext "Configuration of") ${NET_ID} " \
	--inputbox "$(gettext "Enter the DNS address"),\
	$(gettext "it is normally the address of your router access point"): " 10 60 ${GW} 2> $TMP/DNS
	DNS=$(tail -n 1 $TMP/DNS)

	/sbin/ifconfig ${NET_ID} ${IP} broadcast ${BROADCAST} netmask ${PREFIX}

	if [ -n ${GW} ]; then
		/bin/ip route add default via ${GW}
	fi
	cat > /etc/sysconfig/ifconfig.${NET_ID} << "EOF"
ONBOOT=yes
SERVICE=ipv4-static
EOF
	echo "IP=${IP}" >> /etc/sysconfig/ifconfig.${NET_ID}
	if [ -n ${GW} ]; then
		echo "GATEWAY=${GW}" >> /etc/sysconfig/ifconfig.${NET_ID}
	fi
	echo "PREFIX=${PREFIX}" >> /etc/sysconfig/ifconfig.${NET_ID}
	echo "BROADCAST=${BROADCAST}" >> /etc/sysconfig/ifconfig.${NET_ID}

	if [ -n "${DNS}" ]; then
		dialog \
		--title " $(gettext "DNS Search Suffix") " \
		--inputbox "$(gettext "Enter the domain name"),\
		$(gettext "this is only need if you are in a subdomain").\
		$(gettext "Most of the time it's not need"): " 10 60 2> $TMP/SUFFIX
		SUFFIX=$(tail -n 1 $TMP/SUFFIX)
		echo "nameserver ${DNS}" > /etc/resolv.conf
		if [ -n "${SUFFIX}" ]; then
			echo "search ${SUFFIX}" >> /etc/resolv.conf
		fi
	fi
fi
cat > /etc/sysconfig/network << "EOF"
HOSTNAME='nutyx'        # Hostname of this machine
MANAGER=''              # Network manager (wicd/networkmanager/cli/nothing)
NETWORKWAIT='no'        # Wait or not for network
LINKDELAY='15'          # init delay for initialisation of Networkmanager
NETWORKDELAY='0'        # init delay to wait after initialisation of Networkmanager
EOF
if [ "$SETUP_INITRD" == "yes" ]; then
	/etc/rc.d/init.d/network start
fi
SETUP_CONFIG_NETWORK="no"
}
setup_language()
{
/usr/bin/localedef -i de_CH -f UTF-8 de_CH.UTF8
/bin/setfont LatGrkCyr-8x16
while [ true ]; do
dialog   \
--no-ok --no-cancel \
--title "" --menu "" 0 0 0 \
"United Arab Emirates" "Arabic" \
"Agleria" "Arabic" \
"Egypt" "Arabic" \
"India" "Arabic" \
"Iraq" "Arabic" \
"Jordan" "Arabic" \
"Kuwait" "Arabic" \
"Lebanon" "Arabic" \
"Libyan Arab Jamahiriya" "Arabic" \
"Moroco" "Arabic" \
"Oman" "Arabic" \
"Qatar" "Arabic" \
"Saudi Arabia" "Arabic" \
"Sudan" "Arabic" \
"South Sudan" "Arabic" \
"Syrian Arab Republic" "Arabic" \
"Tunisia" "Arabic" \
"Yemen" "Arabic" \
"Azerbaijan" "Azerbaycanca" \
"Cataluña" "Catala" \
"Česko" "čeština" \
"cymru" "Cymraeg" \
"Danmark" "Dansk" \
"Deutschland" "Deutsch" \
"Österreich" "Deutsch" \
"Schweiz" "Deutsch" \
"Luxemburg"  "Deutsch" \
"Belgien" "Deutsch" \
"Eesti" "Eesti" \
"Australia" "English" \
"Botwana" "English" \
"Canada" "English" \
"Denmark" "English" \
"United Kingdom" "English" \
"Hong Kong" "English" \
"Ireland" "English" \
"India " "English" \
"Nigeria" "English" \
"New Zealand" "English" \
"Philippines" "English" \
"Singapore" "English" \
"United States" "English" \
"South Africa" "English" \
"Zambia" "English" \
"Zimbabwe" "English" \
"Argentiña" "Español" \
"Bolivia" "Español" \
"Chile" "Español" \
"Colombia" "Español" \
"Costa Rica" "Español" \
"Cuba" "Español" \
"Dominican Republic" "Español" \
"Ecuador" "Español" \
"España" "Español" \
"Guatemala" "Español" \
"Honduras" "Español" \
"Mexico" "Español" \
"Nicaragua" "Español" \
"Panama" "Español" \
"Peru" "Español" \
"Puerto Rico" "Español" \
"Paraguay" "Español" \
"El Salvador" "Español" \
"Estados Unidos" "Español" \
"Uruguay" "Español" \
"Venezuala" "Español" \
"Euskera" "Euskera" \
"France" "Français" \
"Suisse" "Français" \
"Belgique" "Français" \
"Luxembourg" "Français" \
"Quebec" "Français" \
"Galego" "Galego" \
"Ελληνική Δημοκρατία" "Ελληνικά" \
"Hrvatska" "Hrvatski" \
"Iceland" "Icelandic" \
"Ireland" "Irish" \
"Italia" "Italiano" \
"Svizzera" "Italiano" \
"latviešu" "latviešu" \
"lietuvių" "lietuvių" \
"kinyarwanda" "kinyarwanda" \
"Magyar" "Magyar" \
"Aruba" "Nederlands" \
"België" "Nederlands" \
"The Nederlands" "Nederlands" \
"Norge" "Norsk bokmål" \
"Poland" "Polski" \
"Brazil" "Português" \
"Portugal" "Português" \
"română" "română" \
"shqip" "shqip" \
"slovenčina" "slovenčina" \
"Slovenščina" "Slovenščina" \
"Srbija" "Srpski" \
"Suomi" "Suomi" \
"Sverige" "Svenska" \
"Türkiye" "Tükçe" \
"Thaïland" "Thaï" \
"Ukraïna" "Ukraïna" \
"Viêt nam" "Viêt nam" \
2> $TMP/language.check

if [ ! $? = 0 ]; then
  break
fi
REPLY=`cat $TMP/language.check`
break
done
sed -i "/locale/d" /etc/cards.conf
case ${REPLY} in
 "United Arab Emirates")
	_msgfmt ar_AE
	ln -sf ${ZONEINFO}Asia/Dubai ${LOCALTIME};;
 "Agleria")
	_msgfmt ar_DZ
	ln -sf ${ZONEINFO}Africa/Addis_Ababa ${LOCALTIME};;
 "Egypt")
	_msgfmt ar_EG
	ln -sf ${ZONEINFO}Egypt ${LOCALTIME};;
 "India")
	_msgfmt ar_IN
	ln -sf ${ZONEINFO}Asia/Kolkata ${LOCALTIME};;
 "Iraq")
	_msgfmt ar_IQ
	ln -sf ${ZONEINFO}Asia/Baghdad ${LOCALTIME};;
 "Jordan")
	_msgfmt ar_IQ
	ln -sf ${ZONEINFO}Asia/Amman ${LOCALTIME};;
 "Kuwait")
	_msgfmt ar_KW
	ln -sf ${ZONEINFO}Asia/Kuwait ${LOCALTIME};;
 "Lebanon")
	_msgfmt ar_LB
	ln -sf ${ZONEINFO}Asia/Beirut ${LOCALTIME};;
 "Libyan Arab Jamahiriya")
	_msgfmt ar_LY
	ln -sf ${ZONEINFO}Africa/Tripoli ${LOCALTIME};;
 "Moroco")
	_msgfmt ar_MA
	ln -sf ${ZONEINFO}Africa/Casablanca ${LOCALTIME};;
 "Oman")
	_msgfmt ar_OM
	ln -sf ${ZONEINFO}Asia/Muscat ${LOCALTIME};;
 "Qatar")
	_msgfmt ar_QA
	ln -sf ${ZONEINFO}Asia/Qatar ${LOCALTIME};;
 "Saudi Arabia")
	_msgfmt ar_SA
	ln -sf ${ZONEINFO}Asia/Riyadh ${LOCALTIME};;
 "Sudan")
	_msgfmt ar_SD
	ln -sf ${ZONEINFO}Africa/Khartoum ${LOCALTIME};;
 "South Sudan")
	_msgfmt ar_SS
	ln -sf ${ZONEINFO}Africa/Khartoum ${LOCALTIME};;
 "Syrian Arab Republic")
	_msgfmt ar_SY
	ln -sf ${ZONEINFO}Asia/Damascus ${LOCALTIME};;
 "Tunisia")
	_msgfmt ar_TN
	ln -sf ${ZONEINFO}Africa/Tunis ${LOCALTIME};;
 "Yemen")
	_msgfmt ar_YE
	ln -sf ${ZONEINFO}Asia/Aden ${LOCALTIME};;
 "Azerbaijan")
	_msgfmt az_AZ
	ln -sf ${ZONEINFO}Asia/Baku;;
 "Cataluña")
	_msgfmt ca_ES
	ln -sf ${ZONEINFO}Europe/Madrid ${LOCALTIME};;
 "Cestina")
	_msgfmt cs_CZ
	ln -sf ${ZONEINFO}Europe/Prague ${LOCALTIME};;
 "Cymraeg")
	_msgfmt cy_GB
	ln -sf ${ZONEINFO}Europe/London ${LOCALTIME};;
 "Danmark")
	_msgfmt da_DK
	ln -sf ${ZONEINFO}Europe/Copenhagen ${LOCALTIME};;
 "Deutschland")
	_msgfmt de_DE
	ln -sf ${ZONEINFO}Europe/Berlin ${LOCALTIME};;
 "Österreich")
	_msgfmt de_AT
	ln -sf ${ZONEINFO}Europe/Vienna ${LOCALTIME};;
 "Schweiz")
	_msgfmt de_CH
	ln -sf ${ZONEINFO}Europe/Zurich ${LOCALTIME};;
 "Luxemburg")
	_msgfmt de_LU
	ln -sf ${ZONEINFO}Europe/Luxembourg ${LOCALTIME};;
 "Belgien")
	_msgfmt de_BE
	ln -sf ${ZONEINFO}Europe/Brussels ${LOCALTIME};;
 "Eesti")
	_msgfmt et_EE
	ln -sf ${ZONEINFO}Europe/Tallinn ${LOCALTIME};;
 "Australia")
	_msgfmt en_AU
	ln -sf ${ZONEINFO}Australia/Sydney ${LOCALTIME};;
 "Botwana")
	_msgfmt en_BW
	ln -sf ${ZONEINFO}Africa/Gaborone ${LOCALTIME};;
 "Canada")
	_msgfmt en_CA
	ln -sf ${ZONEINFO}Canada/Central ${LOCALTIME};;
 "Denmark")
	_msgfmt en_DK
	ln -sf ${ZONEINFO}Europe/Copenhagen ${LOCALTIME};;
 "United Kingdom")
	_msgfmt en_GB
	ln -sf ${ZONEINFO}Europe/London ${LOCALTIME};;
 "Hong Kong")
	_msgfmt en_HK
	ln -sf ${ZONEINFO}Asia/Hong_Kong ${LOCALTIME};;
 "Ireland")
	_msgfmt en_IE
	ln -sf ${ZONEINFO}Europe/Dublin ${LOCALTIME};;
 "India ")
	_msgfmt en_IN
	ln -sf ${ZONEINFO}Indian/Maldives ${LOCALTIME};;
 "Nigeria")
	_msgfmt en_NG
	ln -sf ${ZONEINFO}Africa/Lagos ${LOCALTIME};;
 "New Zealand")
	_msgfmt en_NZ
	ln -sf ${ZONEINFO}Pacific/Auckland ${LOCALTIME};;
 "Philippines")
	_msgfmt en_PH
	ln -sf ${ZONEINFO}Asia/Manila ${LOCALTIME};;
 "Singapore")
	_msgfmt en_SG
	ln -sf ${ZONEINFO}Asia/Singapore ${LOCALTIME};;
 "United States")
	_msgfmt en_US
	ln -sf ${ZONEINFO}America/New_York ${LOCALTIME};;
 "South Africa")
	_msgfmt en_ZA
	ln -sf ${ZONEINFO}Africa/Johannesburg ${LOCALTIME};;
 "Zambia")
	_msgfmt en_ZM
	ln -sf ${ZONEINFO}Africa/Lusaka ${LOCALTIME};;
 "Zimbabwe")
	_msgfmt en_ZW
	ln -sf ${ZONEINFO}Africa/Harare ${LOCALTIME};;
 "Argentiña")
	_msgfmt es_AR
	ln -sf ${ZONEINFO}America/Buenos_Aires ${LOCALTIME};;
 "Bolivia")
	_msgfmt es_BO
	ln -sf ${ZONEINFO}America/La_paz ${LOCALTIME};;
 "Chile")
	_msgfmt es_CL
	ln -sf ${ZONEINFO}America/Santiago ${LOCALTIME};;
 "Colombia")
	_msgfmt es_CO
	ln -sf ${ZONEINFO}America/Bogota ${LOCALTIME};;
 "Costa Ricar")
	_msgfmt es_CR
	ln -sf ${ZONEINFO}America/Costa_Rica ${LOCALTIME};;
 "Cuba")
	_msgfmt es_CU
	ln -sf ${ZONEINFO}America/Havana ${LOCALTIME};;
 "Dominican Republic")
	_msgfmt es_DO
	ln -sf ${ZONEINFO}America/Santo_Domingo ${LOCALTIME};;
 "Ecuador")
	_msgfmt es_EC
	ln -sf ${ZONEINFO}America/Guayaquil ${LOCALTIME};;
 "España")
	_msgfmt es_ES
	ln -sf ${ZONEINFO}Europe/Madrid ${LOCALTIME};;
 "Guatemala")
	_msgfmt es_GT
	ln -sf ${ZONEINFO}America/Guatemala ${LOCALTIME};;
 "Honduras")
	_msgfmt es_HN
	ln -sf ${ZONEINFO}America/Tegucigalpa ${LOCALTIME};;
 "Mexico")
	_msgfmt es_MX
	ln -sf ${ZONEINFO}America/Mexico_City ${LOCALTIME};;
 "Nicaragua")
	_msgfmt es_NI
	ln -sf ${ZONEINFO}America/Managua ${LOCALTIME};;
 "Panama")
	_msgfmt es_PA
	ln -sf ${ZONEINFO}America/Panama ${LOCALTIME};;
 "Peru")
	_msgfmt es_PE
	ln -sf ${ZONEINFO}America/Lima ${LOCALTIME};;
 "Puerto Rico")
	_msgfmt es_PR
	ln -sf ${ZONEINFO}America/Argentina/San_Juan ${LOCALTIME};;
 "Paraguay")
	_msgfmt es_PY
	ln -sf ${ZONEINFO}America/Asuncion ${LOCALTIME};;
 "El Salvador")
	_msgfmt es_SV
	ln -sf ${ZONEINFO}America/El_Salvador ${LOCALTIME};;
 "Estados Unidos")
	_msgfmt es_US
	ln -sf ${ZONEINFO}America/New_York ${LOCALTIME};;
 "Uruguay")
	_msgfmt es_UY
	ln -sf ${ZONEINFO}America/Montevideo ${LOCALTIME};;
 "Venezuala")
	_msgfmt es_VE
	ln -sf ${ZONEINFO}America/Caracas ${LOCALTIME};;
 "Euskera")
	_msgfmt es_ES
	ln -sf ${ZONEINFO}Europe/Madrid;;
 "France")
	_msgfmt fr_FR
	ln -sf ${ZONEINFO}Europe/Paris ${LOCALTIME};;
 "Belgique")
	_msgfmt fr_BE
	ln -sf ${ZONEINFO}Europe/Brussels ${LOCALTIME};;
 "Suisse")
	_msgfmt fr_CH
	ln -sf ${ZONEINFO}Europe/Zurich ${LOCALTIME};;
 "Luxembourg")
	_msgfmt fr_LU
	ln -sf ${ZONEINFO}Europe/Luxembourg ${LOCALTIME};;
 "Quebec")
	_msgfmt fr_CA
	ln -sf ${ZONEINFO}America/Montreal ${LOCALTIME};;
 "Ελληνικά")
	_msgfmt el_GR
	ln -sf ${ZONEINFO}Europe/Athens ${LOCALTIME};;
 "Galego")
	_msgfmt gl_ES
	ln -sf ${ZONEINFO}Europe/Madrid ${LOCALTIME};;
 "Hrvatska")
	_msgfmt hr_HR
	ln -sf ${ZONEINFO}Europe/Zagreb ${LOCALTIME};;
 "Iceland")
	_msgfmt is_IS
	ln -sf ${ZONEINFO}Atlantic/Reykjavik ${LOCALTIME};;
 "Ireland")
	_msgfmt ga_IE
	ln -sf ${ZONEINFO}Europe/Dublin ${LOCALTIME};;
 "Italia")
	_msgfmt it_IT
	ln -sf ${ZONEINFO}Europe/Rome ${LOCALTIME};;
 "Svizzera")
	_msgfmt it_CH
	ln -sf ${ZONEINFO}Europe/Zurich ${LOCALTIME};;
 "kinyarwanda")
	_msgfmt rw_RW
	ln -sf ${ZONEINFO}/Africa/Kigali ${LOCALTIME};;
 "latviešu")
	_msgfmt lv_LV;;
 "lietuvių")
	_msgfmt lt_LT;;
 "Magyar")
	_msgfmt hu_HU;;
 "Aruba")
	_msgfmt nl_AW
	ln -sf ${ZONEINFO}America/Aruba ${LOCALTIME};;
 "België")
	_msgfmt nl_BE
	ln -sf ${ZONEINFO}Europe/Brussels ${LOCALTIME};;
 "The Nederlands")
	_msgfmt nl_NL
 	ln -sf ${ZONEINFO}Europe/Amsterdam ${LOCALTIME};;
 "Norge")
	_msgfmt nb_NO
  _msgfmt nn_NO
	echo "export LANG=nb_NO.utf-8" > ${LOCALE}
	ln -sf ${ZONEINFO}Europe/Oslo ${LOCALTIME};;
 "Polski")
	_msgfmt pl_PL
	echo "export LANG=pl_PL.utf-8" > ${LOCALE}
	ln -sf ${ZONEINFO}Europe/Warsaw ${LOCALTIME};;
 "Portugal")
	_msgfmt pt_PT
	echo "export LANG=pt_PT.utf-8" > ${LOCALE}
	ln -sf ${ZONEINFO}Europe/Lisbon ${LOCALTIME};;
 "Brasil")
	_msgfmt pt_BR
	ln -sf ${ZONEINFO}America/Sao_Paulo ${LOCALTIME};;	
 "română")
	_msgfmt ro_RO
	ln -sf ${ZONEINFO}Europe/Bucharest ${LOCALTIME};;
 "shqip")
	_msgfmt sq_MK
	ln -sf ${ZONEINFO}Europe/Tirane ${LOCALTIME};;
 "slovenčina")
	_msgfmt sk_SK
	lb -sf ${ZONEINFO}Europe/Bratislava ${LOCALTIME};;
 "Slovenščina")
	_msgfmt sl_SI
	lb -sf ${ZONEINFO}Europe/Ljubljana ${LOCALTIME};;
 "Srbija")
	_msgfmt sr_RS
	ln -sf ${ZONEINFO}Europe/Belgrade ${LOCALTIME};;
 "Suomi")
	_msgfmt fi_FI
	ln -sf ${ZONEINFO}Europe/Helsinki ${LOCALTIME};;
 "Sverige")
	_msgfmt sv_SE
	ln -sf ${ZONEINFO}Europe/Stockholm ${LOCALTIME};;
 "Türkiye")
	_msgfmt tr_TR
	ln -sf ${ZONEINFO}Europe/Istanbul ${LOCALTIME};;
 "Thaïland")
	_msgfmt th_TH
	ln -sf ${ZONEINFO}Asia/Bangkok ${LOCALTIME};;
 "Ukraïna")
	_msgfmt uk_UA
	ln -sf ${ZONEINFO}Europe/Kiev ${LOCALTIME};;
 "Viêt nam")
	_msgfmt vi_VN
	ln -sf ${ZONEINFO}Asia/Ho_Chi_Minh ${LOCALTIME};;
esac
. ${LOCALE}
SETUP_CONFIG_LANGUAGE="no"
}
setup_keymap ()
{
	cat > ${CONSOLE} << "EOF"
FONT="LatGrkCyr-8x16"
UNICODE="1"
LOGLEVEL=1
EOF
	cat > ${XORGKB} << "EOF"
Section "InputClass"
  Identifier "Generic Keyboard"
  MatchIsKeyboard "yes"
EOF
while [ true ]; do
dialog  \
--title " $(gettext "Keyboard Layout") " \
--backtitle " $(gettext "Settings") " --menu " $(gettext "Choose available"): " 0 0 0 \
"fr-latin9" "AZERTYUIOP" \
"be-latin1" "AZERTYUIOP" \
"fr_CH-latin1" "QWERTZUIOP" \
"de_CH-latin1" "QWERTZUIOP" \
"cf" "AZERTYUIOP" \
"en" "QWERTYUIOP" \
"de-latin1" "QWERTY" \
"azerty" "AZERTY" \
"ANSI-dvorak" "" \
"applkey" "" \
"backspace" "" \
"bg-cp1251" "" \
"bg-cp855" "" \
"bg_bds-cp1251" "" \
"bg_bds-utf8" "" \
"bg_pho-cp1251" "" \
"bg_pho-utf8" "" \
"br-abnt" "" \
"br-abnt2" "" \
"br-latin1-abnt2" "" \
"br-latin1-us" "" \
"by" "" \
"croat" "" \
"ctrl" "" \
"cz-cp1250" "" \
"cz-lat2-prog" "" \
"cz-lat2" "" \
"cz-us-qwertz" "" \
"cz" "" \
"de-latin1-nodeadkeys" "" \
"de" "" \
"defkeymap" "" \
"defkeymap_V1.0" "" \
"dk-latin1" "" \
"dk" "" \
"dvorak-l" "\"<>PYF" \
"dvorak-r" "" \
"dvorak" "" \
"emacs" "" \
"emacs2" "" \
"es-cp850" "" \
"es" "" \
"et-nodeadkeys" "" \
"et" "" \
"euro" "" \
"euro1" "" \
"euro2" "" \
"fi-latin1" "QWERTYUIOPÅ" \
"fi-latin9" "QWERTYUIOPÅ" \
"fi" "" \
"gr-pc" "" \
"gr" "" \
"hu" "" \
"hu101" "" \
"il-heb" "" \
"il-phonetic" "" \
"il" "" \
"is-latin1-us" "" \
"is-latin1" "" \
"it-ibm" "" \
"it" "" \
"it2" "" \
"jp106" "" \
"keypad" "" \
"la-latin1" "" \
"list" "" \
"lt.baltic" "" \
"lt" "" \
"lt.l4" "" \
"mk-cp1251" "" \
"mk-utf" "" \
"mk" "" \
"mk0" "" \
"nl" "" \
"nl2" "" \
"no-latin1" "" \
"no" "" \
"pc110" "" \
"pl" "" \
"pl2" "" \
"pt-latin1" "" \
"pt-latin9" "" \
"ro_win" "" \
"ru-cp1251" "" \
"ru-ms" "" \
"ru-yawerty" "" \
"ru" "" \
"ru1" "" \
"ru2" "" \
"ru3" "" \
"ru4" "" \
"ru_win" "" \
"se-fi-ir209" "" \
"se-fi-lat6" "" \
"se-ir209" "" \
"se-lat6" "" \
"sg-latin1-lk450" "" \
"sg-latin1" "" \
"sg" "" \
"sk-prog-qwerty" "" \
"sk-prog-qwertz" "" \
"sk-qwerty" "" \
"sk-qwertz" "" \
"slovene" "" \
"speakup-jfw" "" \
"speakupmap" "" \
"sr-cy" "" \
"sv-latin1" "" \
"tr_f-latin5" "" \
"tr_q-latin5" "" \
"tralt" "" \
"trf" "" \
"trq" "" \
"ua-utf-ws" "" \
"ua-utf" "" \
"ua-ws" "" \
"ua" "" \
"uk" "" \
"unicode" "" \
"us-acentos" "" \
"windowkeys" "" 2> $TMP/locale.check

if [ ! $? = 0 ]; then
  break
fi
REPLY=`cat $TMP/locale.check`
break
done
sed -i "/KEYMAP/d" ${CONSOLE}
echo "KEYMAP=${REPLY}.map" >> ${CONSOLE}
loadkeys ${REPLY}.map > /dev/null 2>&1
case $REPLY in
	en)
		echo '  Option "XkbLayout" "us"' >> ${XORGKB};;
	be-latin1|wangbe*)
		echo '  Option "XkbLayout" "be"' >> ${XORGKB};;
	cf)
		echo '  Option "XkbLayout" "cf"' >> ${XORGKB};;
	fr|fr-*|azerty)
		echo '  Option "XkbLayout" "fr"' >> ${XORGKB};;
	fr_CH*)
		echo '  Option "XkbLayout" "ch"' >> ${XORGKB}
		echo '  Option "XkbVariant" "fr"' >> ${XORGKB};;
	de_CH*) echo '  Option "XkbLayout" "ch"' >> ${XORGKB};;
	de-*) echo '  Option "XkbLayout" "de"' >> ${XORGKB};;
	es|es-*) echo '  Option "XkbLayout" "es"' >> ${XORGKB};;
	da*) echo '  Option "XkbLayout" "da"' >> ${XORGKB};;
	nl*) echo '  Option "XkbLayout" "nl"' >> ${XORGKB};;
	it*) echo '  Option "XkbLayout" "it"' >> ${XORGKB};;
	lu*) echo '  Option "XkbLayout" "lu"' >> ${XORGKB};;
	pt*) echo '  Option "XkbLayout" "pt"' >> ${XORGKB};;
	no*) echo '  Option "XkbLayout" "no"' >> ${XORGKB};;
	se*) echo '  Option "XkbLayout" "sv"' >> ${XORGKB};;
	fi*) echo '  Option "XkbLayout" "fi"' >> ${XORGKB};;
	ga*) echo '  Option "XkbLayout" "ga"' >> ${XORGKB};;
	el*) echo '  Option "XkbLayout" "el"' >> ${XORGKB};;
	pl*) echo '  Option "XkbLayout" "pl"' >> ${XORGKB};;
	ro_*) echo '  Option "XkbLayout" "ro"' >> ${XORGKB};;
	ru*) echo '  Option "XkbLayout" "ru"' >> ${XORGKB};;
	sr*) echo '  Option "XkbLayout" "sr"' >> ${XORGKB};;
	slo*) echo '  Option "XkbLayout" "sl"' >> ${XORGKB};;
	cro*) echo '  Option "XkbLayout" "hr"' >> ${XORGKB};;
	tr*) echo '  Option "XkbLayout" "tr"' >> ${XORGKB};;
esac
echo "EndSection" >> ${XORGKB}
SETUP_CONFIG_KEYBOARD="no"
}

setup_clock() {
	local TABDATE
	HWCLOCK=`LANG=C.utf-8 hwclock -r`
	dialog --title "   $(gettext "Coordinated Universal Time or Local Time ?")  " \
	--yesno "$(gettext "The hardware clock is set to"):\n\n $HWCLOCK. \n\n$(gettext "Do you want to use this time as Coordinated Universal Time ?") \n\
$(gettext "so that the summer/winter time is changed automatically" ) " 0 0
	retval=$?
	case $retval in
		0)
			UTC=1;;
		1)
			UTC=0;;
	esac

	echo "UTC=${UTC}" > /etc/sysconfig/clock

	[ -r /etc/sysconfig/clock ] && . /etc/sysconfig/clock

	case "${UTC}" in
		1)
			CLOCKPARAMS="${CLOCKPARAMS} --utc";;
		0)
			CLOCKPARAMS="${CLOCKPARAMS} --localtime";;
	esac
	
	hwclock --hctosys ${CLOCKPARAMS} >/dev/null

	exec 3>&1
	DESC=" $(gettext "Use the arrows keys to change the values") "
	USERDATE=`dialog --title " $(gettext "Please enter the date") " \
	--calendar "$DESC" 0 0 2>&1 1>&3`
	code=$?
	exec 3>&-
	case $code in
		0)
			TABDATE=(`echo $USERDATE|sed "s|/| |g"`)
			GOODDATE="${TABDATE[2]}${TABDATE[1]}${TABDATE[0]} "
			;;
		1)
			SETUP_CONFIG_CLOCK="no"
			break;;
	esac
	exec 3>&1
	USERTIME=`dialog --title " $(gettext "Please enter the time") " \
	--timebox  "$DESC" 0 0 2>&1 1>&3`
	code=$?
	exec 3>&-
	case $code in
		0)
			echo "$GOODDATE$USERTIME" > $TMP/date;;
		1)
			break;;
	esac

	date -s "$GOODDATE$USERTIME"

	hwclock --systohc ${CLOCKPARAMS}

	SETUP_CONFIG_CLOCK="no"
}
select_disk() {
	local retval result
	retval=""
	result=""
	while [ "$retval" == "" ]; do
		dialog --title "   ${1}    " \
		--menu \
		"  $(gettext "Choose the disk you want to use for this operation")  " \
		0 0 0  \
		`for DISK in $DISK_LIST; do  lsblk -p -n -d -o NAME,SIZE $DISK; done` \
		2> $TMP/disk
		retval=$?
		result=`cat $TMP/disk`
	done
	case $retval in
		0)
			if [ "$result" == "" ]; then
				retval=""
			fi;;
		1|255)
			break;;
	esac
	DISK=`cat $TMP/disk|sed 's/"//g'`
	if [ -z $DISK ]; then
		DISK="no"
	fi
}
select_partition() {
	local retval result
	retval=""
	result=""
	while [ "$retval"  == "" ]; do
		dialog --cancel-label "$(gettext "Main Menu")" \
		--title " ${1} " \
		--menu " $(gettext "Choose the partition you want to use for this operation") " \
		0 0 0 \
		`for PARTITION in ${PARTITION_LIST[@]}; do  lsblk -p -n -o NAME,SIZE $PARTITION; done`  2>$TMP/part
		retval=$?
		result=`cat $TMP/part`
		case $retval in
			0)
				if [ "$result" == "" ]; then
					retval=""
				fi;;
			1|255)
				break;;
		esac
	done
	PARTITION=`cat $TMP/part|sed 's/"//g'`
	if [ -z $PARTITION ];then
		dialog --no-cancel \
		--title " $(gettext "No partition available") " \
		--msgbox " $(gettext "Please create/modify yours partitions") " 0 0
		PARTITION="no"
	fi
}
check_available_disk() {
	unset DISK_LIST
	local DISK_FULL_LIST
	DISK_FULL_LIST=(`lsblk -p -n -d -o NAME -e 1,3,7,11`)
	for i in ${DISK_FULL_LIST[@]}; do
		[ "`lsblk -p -n -d -o LABEL $i`" == "nutyxcd" ] && continue
		DISK_LIST="$DISK_LIST $i"
	done
	if [ -z "$DISK_LIST" ]; then
		dialog --no-cancel \
		--title " $(gettext "No disk available") " \
		--msgbox " $(gettext "Please stop the PC and install a harddisk") " 6 60
	else
		# Only one disk ?
		if [ "`lsblk -p -n -d -o NAME -e 1,3,7,11|wc -l`" == "1" ]; then
			DISK=`lsblk -p -n -d -o NAME -e 1,3,7,11`
			echo "$DISK" > $TMP/disk
		fi
		CHECK_HD_OK="yes"
	fi
}
check_available_partition() {
	unset PARTITION_LIST
	if [ "$CHECK_HD_OK" == "no" ]; then
		check_available_disk
		 [ "$CHECK_HD_OK" == "no" ] && return
	fi
	PARTITION_LIST=(`for i in $DISK_LIST; do  lsblk -p -l -n -o NAME $i| tail -n +2; done`)
	if [ -z "$PARTITION_LIST" ];then
		dialog --no-cancel \
		--title " $(gettext "No partition available") " \
		--msgbox " $(gettext "Please create/modify yours partitions") " 0 0
		CHECK_PART_OK="no"
		setup_partition
	else
		# Only one partition ?
		if [ "`lsblk -p -n -d -o NAME -e 1,3,7,11|wc -l`" == "1" ]; then
			# Only one disk
			DISK=`lsblk -p -n -d -o NAME -e 1,3,7,11`
			if [ "`lsblk -p -n -l -o NAME -e 1,3,7,11 $DISK|tail -n +2|wc -l`" == "1" ]; then
				echo "PARTITION=$PARTITION" > /dev/tty2
				PARTITION=`lsblk -p -n -l -o NAME -e 1,3,7,11 $DISK|tail -1`
				CHECK_SINGLE_PARTITION="yes"
				echo "CHECK_SINGLE_PARTITION=$CHECK_SINGLE_PARTITION"  > /dev/tty2
			fi
		fi
		CHECK_PART_OK="yes"
	fi
}
setup_help() {
	dialog --no-cancel \
	--title "   $(gettext "How to do it")  " \
	--colors --msgbox \
"$(gettext "This is a very basic tool, do not expect too much"). \
$(gettext "It will ask you on which partition you want to install NuTyX"). \
$(gettext "If not yet created/formatted, it will prompt you to do so").\n\
\n\n$(gettext "NuTyX goes on") \
\Zu\Zb\Z1$(gettext "only ONE partition")\Zn\n\n\
$(gettext "ONE exception, GRUB can be part of it, installed on a separate partition or not installed at all"). \n\n\
$(gettext "As NuTyX users, we recommand you to install GRUB on a separate partition"):\n\n\
$(gettext "To do so"): \
$(gettext "Install GRUB first, then NuTyX") \n\n\
$(gettext "Have fun") :) \n\n\
$(gettext "Thank you for installing NuTyX") \
" 0 0
}	
setup_partition() {
	local retval result
	if [ "$CHECK_HD_OK" == "no" ]; then
		check_available_disk
		[ "$CHECK_HD_OK" == "no" ] && return
	fi
	retval=""
	if [ -z $DISK ]; then
		select_disk "$(gettext "Create all your partitions")"
		[ "$DISK" == "no" ] && return
	fi
	dialog --title " $(gettext "Choose your favorite tool") " \
	--menu "$(gettext "Partitioning of the disk"): $result" 15 55 2 \
	"cfdisk" "$(gettext "Basic partitioning tool")" \
	"fdisk" "$(gettext "Advanced partitioning tool")" 2>$TMP/choix
	retval=$?
	choice=`cat $TMP/choix`
	case $retval in
		0|2)
			case $choice in
				cfdisk)
					cfdisk $DISK;;
				fdisk)
					fdisk $DISK;;
			esac
			;;
		1|2544)
			break;;
	esac
	check_available_partition
}
setup_format() {
	local retval retval2 result
	retval=""
	retval2=""
	if [ "$CHECK_HD_OK" == "no" ]; then
		check_available_disk
		[ "$CHECK_HD_OK" == "no" ] && return
	fi
	if [ "$CHECK_PART_OK" == "no" ]; then
		check_available_partition
		[ "$CHECK_PART_OK" == "no" ] && return
	fi
	if [ -z "$PARTITION" ]; then
		select_partition "$(gettext "Format a partition")"
		[ "$PARTITION" == "no" ] && return
	fi
	dialog --title " $(gettext "Available file systems") " \
	--colors --menu " $(gettext "Choose the file system you want to use for the partition") \
\Zb\Z1$PARTITION\Zn" 0 0 0 \
		"xfs" "$(gettext "High performance journaling file system create by SGI")" \
		"jfs" "$(gettext "Journaling file system create by IBM")" \
		"reiserfs" "$(gettext "Very stable file system but not maintain anymore")" \
		"ext4" "$(gettext "Next generation of Ext3 file system")" \
		"ext3" "$(gettext "Journaling version of Ext2 file system")"  \
		"ext2" "$(gettext "Standard file system Ext2")" \
		"btrfs" "$(gettext "New promising file system")" 2> $TMP/result
		result=`cat $TMP/result`
		if [ ! "$result" == "" ]; then
			dialog --title " $(gettext "Launch the format process ?") " \
			--colors --yesno "$(gettext "The partition") \Zb\Z1$PARTITION\Zn \
$(gettext "will be formatted in") \Zb\Z1$result\Zn.\n\n\
$(gettext "Are you sure you want to continue ?")" 7 60
				retval2=$?
		fi
		case $retval2 in
			0)
				case $result in
					ext2)
						mkfs.ext2 -F $PARTITION > /dev/tty2 || error "mkfs.ext2 $PARTITION"
						;;
					ext3)
						mkfs.ext3 -F $PARTITION > /dev/tty2 || error "mkfs.ext3 $PARTITION"
						;;
					ext4)
						mkfs.ext4 -F $PARTITION > /dev/tty2 || error "mkfs.ext4 $PARTITION"
						;;
					reiserfs)
						mkreiserfs -q $PARTITION > /dev/tty2 || error "mkreiserfs -q $PARTITION"
						;;
					btrfs)
						mkfs.btrfs -f $PARTITION > /dev/tty2 || error "mkfs.btrfs -f $PARTITION"
						;;
					xfs)
						mkfs.xfs -f -m crc=0 $PARTITION > /dev/tty2 || error "mkfs.xfs -f $PARTITION"
						;;
					jfs)
						mkfs.jfs -f $PARTITION > /dev/tty2 || error "mkfs.jfs -f $PARTITION"
						;;
				esac;;
			1|255)
				break;;
		esac
		FORMAT=`print_file_system $PARTITION`
}
install_nutyx() {
	local DIR REAL FILE
	cd ${1}/boot
	MAX=`ls *squashfs|wc -l`
	N=0
	(for i in *squashfs
	do
		DIR=`echo $i|cut -d "." -f1`
		unsquashfs -f -n -d ${2}/${DIR} ${i} >/dev/null
		REAL=`calc $N/$MAX *100`
		PCT=${REAL%.*}
		echo "$PCT"
		N=$((N+1))
	done
	echo "95"
	chmod 750 ${2}/root
	mkdir ${2}/boot 2>/dev/null
	[ "`uname -m`" == "x86_64" ] && ln -svf lib ${2}/lib64
	for FILE in boot/kernel  \
	boot/kernel-`uname -r` \
	boot/initrd \
	etc/profile.d/i18n.sh \
	etc/sysconfig/network \
	etc/sysconfig/clock \
	etc/sysconfig/console \
	etc/X11/xorg.conf.d/20-keyboard.conf \
	etc/cards.conf \
	etc/resolv.conf \
	etc/localtime \
	etc/network \
	$TEXTDOMAINDIR
	do
		if [ -f /$FILE ] || [ -d /$FILE ];then
			cp -a /$FILE  ${2}/$FILE
		fi
	done
	if [ -f /etc/locale/locale-archive ]; then
		rm -f ${2}/usr/lib/locale
		cp -a /etc/locale ${2}/usr/lib/
	fi
	if [ -f ${1}/kernel ]; then
		cp  ${1}/kernel ${2}/boot/kernel-`uname -r`
		ln -sf kernel-`uname -r` ${2}/boot/kernel
	fi
	if [ -f ${1}/initrd ]; then
		cp  ${1}/initrd ${2}/boot/initrd
	fi
	for DIR in home proc sys dev srv mnt tmp
	do
		[ ! -d ${2}/$DIR ] &&	mkdir ${2}/$DIR
	done
	chmod 1777 ${2}/tmp
	echo "100") |
	dialog --title "$(gettext "Install NuTyX")" --gauge "$(gettext "Please wait") ..." 6 50
}
setup_install() {
	local MF retval
	retval=""
  if [ "$CHECK_HD_OK" == "no" ]; then
    check_available_disk
    [ "$CHECK_HD_OK" == "no" ] && return
  fi
  if [ "$CHECK_PART_OK" == "no" ]; then
    check_available_partition
    [ "$CHECK_PART_OK" == "no" ] && return
  fi
  if [ -z $DISK ]; then
		select_disk "$(gettext "Install NuTyX")"
		[ "$DISK" == "no" ] && return
	fi
	echo "PARTITION=$PARTITION" > /dev/tty2
	echo "CHECK_SINGLE_PARTITION=$CHECK_SINGLE_PARTITION" > /dev/tty2
	[ "$CHECK_SINGLE_PARTITION" == "no" ] && unset PARTITION
	if [ -z $PARTITION ]; then
		select_partition "$(gettext "Install NuTyX")"
		[ "$PARTITION" == "no" ] && return
	fi
	echo "PARTITION=$PARTITION" > /dev/tty2
	FORMAT=`print_file_system $PARTITION`
	echo "FORMAT=$FORMAT" > /dev/tty2
	if [ "$FORMAT" == "no" ]; then
		setup_format
		[ "$FORMAT" == "no" ] && return
	fi
	SETUP_INSTALL="no"
	MF=/mnt/hd
	mkdir -p $MF
	mount $PARTITION $MF || error "$(gettext "mounting") $PARTITION"
	if [ -d /media/cdrom/isolinux/boot ]; then
		# Installing from ISO
		install_nutyx "/media/cdrom/isolinux" "$MF"
	else
		# Installing from Maintenance this means
		# TODO the initrd has to be rebuild at configuration time
		install_nutyx "/" "$MF"
	fi
	umount $PARTITION
	SETUP_INSTALL="yes"
	echo "$PARTITION" > /root/boot
	echo "$PARTITION" > $TMP/boot
	dialog --title "   $(gettext "Configuration of the boot of the computer (GRUB)")   " \
	--yesno "$(gettext "Configure the boot of the PC") ? " 0 0
	retval=$?
	case $retval in
		0)
			setup_grub;;
	esac
}
MBR_ok() {
	local retval
	retval=""
	dialog --title "   $(gettext "Everything OK, do you want to modify") $GRUB_CONFIG_FILE ?   " \
	--colors \
	--yesno " $(gettext "A new") $GRUB_CONFIG_FILE $(gettext "has been created"), \
$(gettext "it has been adapted to launch the Maintenance system of NuTyX"), \
$(gettext "if you choose") $(gettext "Yes"), \
$(gettext "an simplify VI editor will allow you to modify it").\n\n \
	\Zb\Z4i\Zn  $(gettext "Enter the edit mode") \n\
	\Zb\Z4Esc\Zn $(gettext "Exit the edit mode") \n\
	\Zb\Z4:q!\Zn $(gettext "Cancel the modifications and exit VI")\n\
	\Zb\Z4:x\Zn  $(gettext "Save and exit VI")\n" 0 0
	retval=$?
	case $retval in
		0|2)
			setup_keymap
			vi $GRUB_CONFIG_DIR/$GRUB_CONFIG_FILE;;
	esac
}
setup_grub() {
	local GRUB_CONFIG_FILE GRUB_CONFIG_DIR GRUB_DESTINATION_DIR GRUB_LOG_FILE
	GRUB_CONFIG_FILE="grub.cfg"
	GRUB_CONFIG_DIR=""
	GRUB_DESTINATION_DIR=""
	GRUB_LOG_FILE=$TMP/grub.log
	if [ "$CHECK_HD_OK" == "no" ]; then
		check_available_disk
		[ "$CHECK_HD_OK" == "no" ] && return
	fi
	if [ "$CHECK_PART_OK" == "no" ]; then
		check_available_partition
		[ "$CHECK_PART_OK" == "no" ] && return
	fi
	if [ -z $DISK ]; then
		select_disk "$(gettext "Configure the boot of the PC")"
		[ "$DISK" == "no" ] && return
	fi
	if [ "$SETUP_INSTALL" != "yes" ]; then
		[ "$CHECK_SINGLE_PARTITION" == "no" ] && unset PARTITION
	fi
	if [ -z $PARTITION ]; then
		select_partition "$(gettext "Configure the boot of the PC")"
		[ "$PARTITION" == "no" ] && return
	fi
	FORMAT=`print_file_system $PARTITION`
	if [ "$FORMAT" == "no" ]; then
		setup_format
		[ "$FORMAT" == "no" ] && return
	fi
	# We saved the current MBR if no yet saved
	dd if=$DISK of=$TMP/MBR bs=512 count=1 2>/dev/null
	# Copy all the necessary files
	mkdir $TMP/boot_partition
	mount $PARTITION $TMP/boot_partition
	echo "$PARTITION" > $TMP/boot_part
	if [ -d $TMP/boot_partition/boot ]; then
		# NuTyX is installed means we install GRUB after install
		GRUB_DESTINATION_DIR="boot/"
	fi
	GRUB_CONFIG_DIR="$TMP/boot_partition/${GRUB_DESTINATION_DIR}grub"
	mkdir $GRUB_CONFIG_DIR 2> /dev/null
	if [ -f $GRUB_CONFIG_DIR/MBR.original ]; then
		dialog --title " !!! Oups !!!! " \
		--msgbox " $(gettext "You already have a copy of the original MBR, I will not make a backup of it") " \
		6 50
	else
		cp $TMP/MBR $GRUB_CONFIG_DIR/MBR.original
		dialog --title " $(gettext "Good to know") " \
		--msgbox " $(gettext "A copy of the original MBR is saved in the folder /boot/grub of your NuTyX. It will then be possible to restore it if need") " 10 60
	fi
	if [ ! -f $GRUB_CONFIG_DIR/$GRUB_CONFIG_FILE ]; then
		cat > $GRUB_CONFIG_DIR/$GRUB_CONFIG_FILE << "EOF"
# Begin grub.cfg
# By default boot the first menu entry.
set default=0
# Allow 5 seconds before booting the default.
set timeout=5
set color_highlight=blue/white
set color_normal=cyan/black
# insmod all_video
# insmod jpeg
# terminal_output gfxterm
EOF
	fi
	# Writing of NEW MBR
	BOOT_FS="`print_file_system $PARTITION`"
	LANG=C /sbin/grub-install --recheck --force --boot-directory=$TMP/boot_partition/${GRUB_DESTINATION_DIR} ${DISK} > ${GRUB_LOG_FILE} 2>&1
	if ! (grep finished ${GRUB_LOG_FILE} > /dev/null); then
		echo "/sbin/grub-install --recheck --force --boot-directory=$TMP/boot_partition/${GRUB_DESTINATION_DIR} [`echo $DISK`]" >> ${GRUB_LOG_FILE}
		mount >> ${GRUB_LOG_FILE}
		echo "DISK=${DISK}" >> ${GRUB_LOG_FILE}
		echo "GRUB_DESTINATION_DIR=${GRUB_DESTINATION_DIR}" >> ${GRUB_LOG_FILE}
		echo "GRUB_CONFIG_DIR=${GRUB_CONFIG_DIR}" >> ${GRUB_LOG_FILE}
		echo "NuTyX_PART=${NuTyX_PART}" >> ${GRUB_LOG_FILE}
		echo "BOOT_FS=${BOOT_FS}" >> ${GRUB_LOG_FILE}
		echo "NuTyX_FS=${NuTyX_FS}" >> ${GRUB_LOG_FILE}
		echo "PATH=$PATH" >> ${GRUB_LOG_FILE}
		env >> ${GRUB_LOG_FILE}
		# Restore MBR
		dd if=$TMP/MBR of=$DISK bs=512 count=1 > 2/dev/null
		dialog --title " $(gettext "Something went wrong probably the file system is not supported") " \
		--msgbox "`cat ${GRUB_LOG_FILE}`" 30 70
		umount $TMP/boot_partition
		umount /mnt/hd 2>/dev/null
		error "Sorry, I cannot install GRUB" # die now
	fi
	if [ -f $TMP/boot ]; then
		#
		# The $TMP/boot file contains the NuTyX partition
		#
		NuTyX_PART="`cat $TMP/boot`"
		BOOT_FS="`print_file_system $PARTITION`"
		NuTyX_FS="`print_file_system $NuTyX_PART`"
		echo "menuentry \"NuTyX ${SETUP_ARCH} ${NuTyX_FS} on ${NuTyX_PART}\" {" >> ${GRUB_CONFIG_DIR}/${GRUB_CONFIG_FILE}
		echo " linux /${GRUB_DESTINATION_DIR}kernel root=${NuTyX_PART} ro quiet " >> ${GRUB_CONFIG_DIR}/${GRUB_CONFIG_FILE}
		echo " initrd /${GRUB_DESTINATION_DIR}initrd" >> ${GRUB_CONFIG_DIR}/${GRUB_CONFIG_FILE}
		echo "}" >> ${GRUB_CONFIG_DIR}/${GRUB_CONFIG_FILE}
		echo " " >> $GRUB_CONFIG_DIR/$GRUB_CONFIG_FILE
		echo "menuentry \"NuTyX Verbose ${SETUP_ARCH} ${NuTyX_FS} on ${NuTyX_PART}\" {" >> $GRUB_CONFIG_DIR/$GRUB_CONFIG_FILE
		echo "  linux /${GRUB_DESTINATION_DIR}kernel root=${NuTyX_PART} ro " >> $GRUB_CONFIG_DIR/$GRUB_CONFIG_FILE
		echo "  initrd /${GRUB_DESTINATION_DIR}initrd" >> $GRUB_CONFIG_DIR/$GRUB_CONFIG_FILE
		echo "}" >> $GRUB_CONFIG_DIR/$GRUB_CONFIG_FILE
	else
		#
		# NuTyX is not yet installed
		#
		cat >> $GRUB_CONFIG_DIR/$GRUB_CONFIG_FILE  << "EOF"
#################################################################
#                                                               #
#               Example of a menuentry:                         #
#                                                               #
#   The NuTyX distribution to boot from is located:             #
#      on the SECOND harddisk ( HDD 2 ) AND                     #
#      the second harddisk has THREE partitions.                #
#      NuTyX IS installed on the third partition.               #
#                                                               #
# NOTE:                                                         #
# -----                                                         #
#                                                               #
#  ==>>>    Harddisk start AT ZERO                              #
#  ==>>>    Partition start AT ONE                              #
#                                                               #
# We need to inform GRUB that we use the kernel on              #
# the Partition Number 3 of Harddisk Number 2                   #
#                                                               #
#  ======>  set root=(hd1,3)                                    #
#                                                               #
# And we need to inform the kernel to look at the right place:  #
#                                                               #
#  ======>  root=/dev/sdb3                                      #
#                                                               #
#           Below the menuentry of this example:                #
#       ( adjust to your needs and remove the '#' )             #
#                                                               #
#################################################################
#
#menuentry  "Harddisk number 2 and partition number 3" {
#   set root=(hd1,3)
#   linux /boot/kernel root=/dev/sdb3 ro quiet
#   initrd /boot/initrd
#}
#
# The same one for debug purpose:
#
#menuentry  "Harddisk number 2 and partition number 3 verbose mode" {
#   set root=(hd1,3)
#   linux /boot/kernel root=/dev/sdb3 ro
#   initrd /boot/initrd
#}
#
EOF
		if [ ! -f $TMP/boot_partition/${GRUB_DESTINATION_DIR}initrd ]; then
			cp /media/cdrom/isolinux/initrd \
			$TMP/boot_partition/${GRUB_DESTINATION_DIR}initrd 2> /dev/null
			cp /media/cdrom/isolinux/kernel \
			$TMP/boot_partition/${GRUB_DESTINATION_DIR}kernel 2> /dev/null
		fi
		MBR_ok
	fi
	umount $PARTITION
}
setup_reboot() {
	cd /
	if [ -f /tmp/depot ]; then
	 umount /media/cdrom > /dev/null 2>&1
	fi
	for i in /mnt/*; do
		umount -f $i > /dev/null 2>&1
	done
	umount /media/cdrom 2>/dev/null
	eject /dev/nutyx-cd 2>/dev/null
	dialog --title "    $(gettext "Reboot the PC")    " \
	--msgbox "  $(gettext "Press OK to reboot the computer")  " 0 0 
	/sbin/reboot -f
}
setup_initrd() {
	dialog --title "   $(gettext "Welcome to the NuTyX installer")   " \
	--colors --menu "    $(gettext "Main Menu")   "  0 0 0 \
	"$(gettext "Help")" "$(gettext "How to do it") ? " \
	"$(gettext "Install")" "$(gettext "Install NuTyX")" \
	"$(gettext "Partitioning")" "$(gettext "Create all your partitions") ($(gettext "optional"))" \
	"$(gettext "Format")" "$(gettext "Format a partition") ($(gettext "optional"))" \
	"$(gettext "Boot")" "$(gettext "Configure the boot of the PC") ($(gettext "optional"))" \
	"$(gettext "Keyboard")" "$(gettext "Configure the keyboard") ($(gettext "optional"))" \
	"$(gettext "Network")" "$(gettext "Configure the network") ($(gettext "optional"))" \
	"$(gettext "Clock")" "$(gettext "Date and time settings") ($(gettext "optional"))" \
	"$(gettext "Console")" "$(gettext "Open a console")" \
	"$(gettext "Restart")" "$(gettext "Reboot the PC")" \
 	2>$TMP/choix
	retval=$?
	choice=`cat $TMP/choix`
	case $retval in
	0|2)
		case $choice in
			"$(gettext "Help")")
				setup_help
				;;
			"$(gettext "Install")")
				echo "CHECK_SINGLE_PARTITION=$CHECK_SINGLE_PARTITION" > /dev/tty2
				[ "$CHECK_SINGLE_PARTITION" == "no" ] && unset PARTITION
				setup_install
				;;
			"$(gettext "Partitioning")")
				setup_partition
				;;
			"$(gettext "Format")")
				echo "CHECK_SINGLE_PARTITION=$CHECK_SINGLE_PARTITION" > /dev/tty2
				[ "$CHECK_SINGLE_PARTITION" == "no" ] && unset PARTITION
				setup_format
				;;
			"$(gettext "Boot")")
				echo "CHECK_SINGLE_PARTITION=$CHECK_SINGLE_PARTITION" > /dev/tty2
				[ "$CHECK_SINGLE_PARTITION" == "no" ] && unset PARTITION
				setup_grub
				;;
			"$(gettext "Keyboard")")
				setup_keymap
				;;
			"$(gettext "Network")")
				setup_net
				;;
			"$(gettext "Clock")")
				setup_clock
				;;
			"$(gettext "Console")")
				source /etc/profile
				/sbin/pwconv
				/sbin/grpconv
				sh
				;;
			"$(gettext "Restart")")
				setup_reboot
				;;
		esac
		;;
	1)
		echo "1"
		;;
	255)
		echo "255"
		;;
	esac

}
config_all() {
	echo "config the system"
}
print_help() {
	echo "usage: `basename $COMMAND` [options]"
	echo "options:"
	echo "   start,                 $(gettext "Start the service")"
	echo "   -ok,   --check-all     $(gettext "Checking the configuration, returning true or false")"
	echo "   -sn,   --show-net      $(gettext "Show the network configuration")"
	echo "   -sk,   --show-keymap   $(gettext "Show the keyboard configuration")"
	echo "   -sc,   --show-clock    $(gettext "Show the date and time settings")"
	echo "   -sl,   --show-locale   $(gettext "Show the timezone and time adjustment")"
	echo "   -sa,   --show-all      $(gettext "Show all configurations")"
	echo "   -cl,   --config-lang   $(gettext "Configure the language")"
	echo "   -ck,   --config-keymap $(gettext "Configure the keyboard")"
	echo "   -cn,   --config-net    $(gettext "Configure the network")"
	echo "   -cc,   --config-clock  $(gettext "Date and time settings")"
	echo "   -cu,   --create-user   $(gettext "Add a user to the system")"
	echo "   -ca,   --config-all    $(gettext "Configure the system")"
}
initrd_only() {
	read -r cmdline < /proc/cmdline
	for param in $cmdline ; do
		case $param in
			root=*)
				root=${param#root=};;
		esac
	done
	if [ "$root" != "" ]; then
		print_help
		exit 1
	else
		# we are in the initrd
		SETUP_INITRD="yes"
		SETUP_CHECKALL="yes"
		SETUP_START_SERVICE="yes"
	fi
}
parse_options() {
	if [ $# -lt 1 ]; then
		initrd_only
	else
		while [ "$1" ]; do
			case "${1}" in
				start)
					SETUP_CHECKALL="yes"
					SETUP_START_SERVICE="yes"
					;;
				stop)
					SETUP_UPGRADE="yes"
					;;
				-ok|--check-all)
					SETUP_CHECKALL="yes"
					;;
				-sn|--show-net)
					echo "show net"
					;;
				-sk|--show-keymap)
					echo "show keyboard"
					;;
				-sl|--show-locale)
					echo "show locale"
					;;
				-sc|--show-config)
					echo "show config"
					;;
				-sa|--show-all)
					echo "show all"
					;;
				-cl|--config-lang)
					SETUP_CONFIG_LANGUAGE="yes"
					SETUP_START_SERVICE="yes"
					;;
				-sl|--show-locale)
					echo "show locale"
					;;
				-ck|--config-keymap)
					unset KEYMAP
					SETUP_CONFIG_KEYBOARD="yes"
					SETUP_START_SERVICE="yes"
					;;
				-cn|--config-net)
					SETUP_CONFIG_NETWORK="yes"
					SETUP_START_SERVICE="yes"
					;;
				-cc|--config-clock)
					SETUP_CONFIG_CLOCK="yes"
					SETUP_START_SERVICE="yes"
					;;
				-cu|--create-user)
					echo "create user"
					;;
				-ca|--config-all)
					echo "config all"
					;;
				-h|--help)
					print_help
					exit 0
					;;
				*)
					echo "`basename ${COMMAND}`: invalid option $1"
					exit 1
					;;
			esac
			shift
		done
	fi
}
check_all () {
	if [ "$SETUP_CONFIG_LANGUAGE" = "no" ]; then
		if [ -r ${LOCALE} ]; then
			. ${LOCALE}
		else
			export SETUP_CONFIG_LANGUAGE="yes"
		fi
		[ -r ${LOCALE} ] || export SETUP_CONFIG_LANGUAGE="yes"
	fi
	if [ "$SETUP_CONFIG_KEYBOARD" = "no" ]; then
		[ -r ${CONSOLE} ] || export SETUP_CONFIG_KEYBOARD="yes"
	fi
	if [ "$SETUP_CONFIG_NETWORK" = "no" ]; then
		[ -z ${NETWORK} ] && export SETUP_CONFIG_NETWORK="yes"
	fi
	if [ "$SETUP_CONFIG_CLOCK" = "no" ]; then
		[ -r ${CLOCK} ] || export SETUP_CONFIG_CLOCK="yes"
	fi

}
service_need () {
	check_all
	if [ "$SETUP_CONFIG_LANGUAGE" = "yes" ] ||
	[ "$SETUP_CONFIG_KEYBOARD" = "yes" ] ||
	[ "$SETUP_CONFIG_NETWORK" = "yes" ] ||
	[ "$SETUP_CONFIG_CLOCK" = "yes" ]; then
		echo "yes"
	else
		 echo "no"
	fi
}
cleanup () {
	if [ ! -z $TMP ]; then
		[ -d $TMP ] &&  rm -r $TMP
	fi
}

top_loop() {
	if [ "$SETUP_INITRD" = "yes" ]; then
		[ "$SETUP_CONFIG_LANGUAGE" = "yes" ] && LANG=de_CH.utf-8 setup_language
		setup_help
		while [ "$SETUP_INSTALL" = "no" ];do
				[ "$SETUP_CONFIG_LANGUAGE" = "yes" ] && LANG=de_CH.utf-8 setup_language
				[ "$SETUP_INSTALL" = "no" ] && setup_initrd
		done
	else
		while [ "$SETUP_CONFIG_LANGUAGE" = "yes" ] ||
			[ "$SETUP_CONFIG_KEYBOARD" = "yes" ] ||
			[ "$SETUP_CONFIG_NETWORK" = "yes" ] ||
			[ "$SETUP_CONFIG_CLOCK" = "yes" ]; do
				[ "$SETUP_CONFIG_LANGUAGE" = "yes" ] && LANG=de_CH.utf-8 setup_language
				[ "$SETUP_CONFIG_KEYBOARD" = "yes" ] && setup_keymap
				[ "$SETUP_CONFIG_NETWORK" = "yes" ] && setup_net
				[ "$SETUP_CONFIG_CLOCK" = "yes" ] && setup_clock
		done
	fi

}
main () {
	parse_options "$@"
	if [ "$SETUP_INITRD" == "yes" ]; then
		SETUP_CONFIG_LANGUAGE="yes"
		SETUP_INSTALL="no"
	fi

	if [ "$SETUP_CHECKALL" == "yes" ]; then
			log_info_msg "Checking configuration..."			
			if [ "`check_all`" == "yes" ]; then
				log_success_msg2
				exit 0
			fi
	fi
	if [ "$SETUP_START_SERVICE" == "yes" ]; then
		check_all
		TMP=`mktemp -d`
		top_loop
		cleanup
	fi
	if [ "$SETUP_UPGRADE" == "yes" ]; then
		if [ "`cards upgrade --size 2> /dev/null`" != "0" ];then
			cards upgrade
		else
			log_info_msg "System is up to date ..."
			evaluate_retval
		fi
	fi
}

#
# VARIABLES
readonly COMMAND="$0"
readonly SETUP_ARCH="`uname -m`"
CARDS="/etc/cards.conf"
XORGKB="/etc/X11/xorg.conf.d/20-keyboard.conf"
CONSOLE="/etc/sysconfig/console"
LOCALE="/etc/profile.d/i18n.sh"
LOCALTIME="/etc/localtime"
ZONEINFO="/usr/share/zoneinfo/"
NETWORK="`ls /etc/sysconfig/ifconfig* 2>/dev/null|head -1`"
CLOCK="/etc/sysconfig/clock"

SETUP_INITRD="no"
SETUP_INSTALL="no"
SETUP_CONFIG_LANGUAGE="no"
SETUP_CONFIG_KEYBOARD="no"
SETUP_CONFIG_NETWORK="no"
SETUP_CONFIG_CLOCK="no"

CHECK_HD_OK="no"
CHECK_PART_OK="no"
CHECK_SINGLE_PARTITION="no"

main "$@"

# End of file
# vim:set ts=2 :
